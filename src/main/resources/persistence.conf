akka {
  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    journal.auto-start-journals = ["akka.persistence.cassandra.journal"]
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

    cassandra {
      events-by-tag {
        eventual-consistency-delay = 2s
        flush-interval = 50ms
        pubsub-notification = on
        first-time-bucket = "20200815T00:00"
      }

      query {
        refresh-interval = 2s
      }

      journal.keyspace = "akka"
      snapshot.keyspace = "akka_snapshot"
    }
  }
}

akka.management {
  health-checks {
    readiness-checks {
      akka-persistence-cassandra = "akka.persistence.cassandra.healthcheck.CassandraHealthCheck"
    }
  }
}

alpakka.cassandra {
  session-provider = "akka.stream.alpakka.cassandra.DefaultSessionProvider"
  session-discovery {
    name = ""
    lookup-timeout = 1 s
    session-dispatcher = "akka.actor.default-dispatcher"
    datastax-java-driver-config = "datastax-java-driver"
  }
}

datastax-java-driver {
  advanced.reconnect-on-init = true
  basic.contact-points = ["127.0.0.1:9042"]
  basic.load-balancing-policy.local-datacenter = "datacenter1"
  profiles {
    akka-persistence-cassandra-profile {
      basic.request {
        consistency = QUORUM
        default-idempotence = true
      }
    }
    akka-persistence-cassandra-snapshot-profile {
      basic.request {
        consistency = QUORUM
        default-idempotence = true
      }
    }
  }
}