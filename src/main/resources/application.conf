akka {
  actor {
    provider = cluster

    serialization-bindings {
      "com.sblendor.domain.CborSerializable" = jackson-cbor
    }
  }

  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka://Sblendor@127.0.0.1:25251",
      "akka://Sblendor@127.0.0.1:25252"
    ]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  management {
    http {
      hostname = "127.0.0.1"
      port = 8558
      route-providers-read-only = false
    }
  }

  persistence {
    cassandra {
      session-provider = "akka.stream.alpakka.cassandra.DefaultSessionProvider"
      session-discovery {
        name = ""
        lookup-timeout = 1s
      }
      session-dispatcher = "akka.persistence.cassandra.default-dispatcher"
      datastax-java-driver-config = "datastax-java-driver"
      read-profile = "akka-persistence-cassandra-profile"
      write-profile = "akka-persistence-cassandra-profile"
      meta-in-events-by-tag-view = on
      coordinated-shutdown-on-error = off
      compatibility {
        cosmosdb = off
      }
      journal {
        class = "akka.persistence.cassandra.journal.CassandraJournal"
        plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
        keyspace-autocreate = false
        tables-autocreate = false
        keyspace = "akka"
        table = "messages"
        table-compaction-strategy {
          class = "SizeTieredCompactionStrategy"
        }
        metadata-table = "metadata"
        all-persistence-ids-table = "all_persistence_ids"
        replication-strategy = "SimpleStrategy"
        replication-factor = 1
        data-center-replication-factors = []
        max-message-batch-size = 100
        target-partition-size = 500000
        gc-grace-seconds = 864000
        max-concurrent-deletes = 10
        support-deletes = on
        support-all-persistence-ids = on
      }
    }
    query {
      class = "akka.persistence.cassandra.query.CassandraReadJournalProvider"
      plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
      read-profile = "akka-persistence-cassandra-profile"
      refresh-interval = 3s
      gap-free-sequence-numbers = on
      events-by-persistence-id-gap-timeout = 10s
      max-buffer-size = 500
      deserialization-parallelism = 1
    }
    snapshot {
      class = "akka.persistence.cassandra.snapshot.CassandraSnapshotStore"
      plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
      write-profile = "akka-persistence-cassandra-snapshot-profile"
      read-profile = "akka-persistence-cassandra-snapshot-profile"
      keyspace-autocreate = false
      tables-autocreate = false
      keyspace = "akka_snapshot"
      table = "snapshots"
      table-compaction-strategy {
        class = "SizeTieredCompactionStrategy"
      }
      replication-strategy = "SimpleStrategy"
      replication-factor = 1
      data-center-replication-factors = []
      gc-grace-seconds = 864000
      max-load-attempts = 3
    }
    cleanup {
      plugin-location = "akka.persistence.cassandra"
      operation-timeout = 10s
      log-progress-every = 100
      dry-run = true
    }
    reconciler {
      plugin-location = "akka.persistence.cassandra"
      read-profile = "akka-persistence-cassandra-profile"
      write-profile = "akka-persistence-cassandra-profile"
    }
    healthcheck {
      plugin-location = "akka.persistence.cassandra"
      timeout = 500ms
      health-check-cql = "SELECT now() FROM system.local"
    }
    default-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor = {
        parallelism-min = 6
        parallelism-factor = 1
        parallelism-max = 6
      }
    }
    journal.plugin = "akka.persistence.cassandra.journal"
  }
}

#For Cassandra profile
datastax-java-driver {
  # advanced.reconnect-on-init = true
  profiles {
    akka-persistence-cassandra-profile {
      basic.request {
        consistency = QUORUM
        default-idempotence = true
      }
    }
    akka-persistence-cassandra-snapshot-profile {
      basic.request {
        consistency = QUORUM
        default-idempotence = true
      }
    }
  }
}

sblendor {
  routes.ask-timeout = 60s
}

